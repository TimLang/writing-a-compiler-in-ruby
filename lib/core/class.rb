# size <= ssize *always* or something is severely wrong.
def __new_class_object(size,superclass,ssize)
  ob = 0
  %s(assign ob (malloc (mul size 4))) # Assumes 32 bit
  i = 1
#  %s(printf "class object: %p (%d bytes) / Class: %p / super: %p / size: %d\n" ob size Class superclass ssize)
#  %s(puts "")
  %s(while (lt i ssize) (do
       (assign (index ob i) (index superclass i))
       (assign i (add i 1))
  ))
  %s(while (lt i size) (do
       (assign (index ob i) __method_missing)
       (assign i (add i 1))
  ))
  %s(assign (index ob 0) Class)
  ob
end

class Class

  def new
    # @instance_size is generated by the compiler. YES, it is meant to be
    # an instance var, not a class var
    size = @instance_size
    %s(assign size (mul size 4))
    %s(assign ob (malloc size))
    %s(assign (index ob 0) self)
    %s(callm ob initialize ())
    ob
  end

  def attr_accessor sym
    %s(printf "attr_accessor %d" sym)
    %s(puts "")
  end
  
  def attr_reader sym
  end

  def attr_writer sym
  end
end

